
# ---------------------------------------------------------------------
# 2. Представлен список чисел. Необходимо вывести элементы исходного
# списка, значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка.
# Для формирования списка использовать генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].

original_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
new_list = [ original_list[index+1] for index in range(0,len(original_list)-1) if original_list[index+1]>original_list[index]]
print ("2. Пример исходного списка: {}".format(original_list))
print ("2. Результат: {}".format(new_list))
# -------------------------------------------------------------------


# -------------------------------------------------------------------
# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21.
# Необходимо решить задание в одну строку.
# Подсказка: использовать функцию range() и генератор.
print ("3. Необходимо решить задание в одну строку: {}".format([number for number in range(20,241) if number%20==0 or number%21==0]))
# -------------------------------------------------------------------


# -------------------------------------------------------------------
# 4. Представлен список чисел. Определить элементы списка, не имеющие
# повторений. Сформировать итоговый массив чисел, соответствующих
# требованию. Элементы вывести в порядке их следования в исходном
# списке. Для выполнения задания обязательно использовать генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]
duplicated_number_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
number_map = {}
for element in duplicated_number_list :
    if element in number_map:
        number_map[element]+=1
    else:
        number_map[element]=0
print (number_map)
print ("Результат: {}".format([element for element in duplicated_number_list if number_map[element]==0]))
# ---------------------------------------------------------------------


# ---------------------------------------------------------------------
# 5. Реализовать формирование списка, используя функцию range() и
# возможности генератора. В список должны войти четные числа от 100 до 1000
# (включая границы). Необходимо получить результат вычисления произведения
# всех элементов списка.
# Подсказка: использовать функцию reduce()
from functools import reduce
def multiplier (m1,m2):
    result = float(m1)*float(m2)
    print (f"{m1}*{m2}={result}")
    return result

generated_list = [number for number in range(100,1001) if number%2==0]
print("Result={}".format(reduce(multiplier,generated_list)))
# -------------------------------------------------------------------


# -------------------------------------------------------------------
# 6. Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного,
# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
# Подсказка: использовать функцию count() и cycle() модуля itertools.
# Обратите внимание, что создаваемый цикл не должен быть бесконечным.
# Необходимо предусмотреть условие его завершения.
# Например, в первом задании выводим целые числа, начиная с 3,
# а при достижении числа 10 завершаем цикл. Во втором также необходимо
# предусмотреть условие, при котором повторение элементов списка будет прекращено.
# A
from itertools import count
start_point = 3
for element in count(start_point):
    print (element)
    if element==10: break
# B
from itertools import cycle
element_map = {}
for element in cycle([1,2,3]):
   if element in element_map:
       break
   else:
       element_map[element]=element
       print (element)
# --------------------------------------------------------------------


# --------------------------------------------------------------------
def fact (n):
    yield n

for el in fact(10) :
    print(el)
