Pip
project-dir:
	readme.md
	code_dir
	setup.cfg
	pyproject.toml
	License
manifest.in


daPap1u

---------------------------------------------
Объявление функции:
def function_name (args....) :
	function_body....
	return function_result;

# функция пустая для override
def none_function ():
	pass


return - может возвращать несколько значений через кортеж.

def function () :
	return a,b

# в данном месте будет вызвана функция и ее результаты распакованы
# в кортеж с указанием именованных переменных
a,b = function()

аргументы функций:
позиционные def function (arg1, arg2): function... return value
		print (function (1,2))
позиционные переменные задаются по порядку в сигнатуре
если позиционный элемент пропущен, то будет ошибка интерпретации
пропуск обязательного аргумента дает ошибку
если заданно значение по умолчанию то ошибки не будет
значения по умолчанию задаются в виде имя переменной равно значение


# паттерн именованные переменные:
именованные def function (arg1, arg2): .....
		print (function(arg1=1,arg2=2))
В первом случае передается список значений во втором случае передается справочник
Если заявлен просто список переменных то все переменные обязательные
Если при объявлении функции какие-то переменные задаются как ключ-значение, то
в этом случае эти значения будут передоваться по умолчанию
Если у функции нет return то эта функция выдает none

def function (*args)
*означает переменное количество аргументов. Кортеж аргументов
def function (**ars)
** означает словарь аргументов. Название аргумента: значение аргумента

# анонимные функции
Анонимные функции построены как lambda
new_func = lambda a1,a2: a1**a2
вызов функции делается через оператор круглых скобок
new_func(1,2)
Анонимные функции работают на одно строчное выражение

# генераторы
Генератор это некоторый аналог паттерна итератора
функция range (start,end,step)
если start>end то будет пустое множество
функцией range можно пользоваться в циклах
range может быть определен только целочисленными значениями

# видимость переменных
Оператор global дает возможность задавать переменные глобально вне видимости области создания переменных
по умолчанию все переменные локальны. Внутри функции все переменные локальны, но их можно сделать глобальными засчет global 
Переменные вне функции глобальна по умолчанию. 

nonlocal - делает переменную нелокальной. Т.е. она будет считана из внешней области видимости, т.е. из вызова внутренней функции относительно внешней
nonlocal - полезен для работы с замыканиями при обращении к переменным из вложенной функции к переменным главной функции


# Модули
импорт модулей из стандартной библиотеки
import time - импортирование времени
import random
import sys
import os
import collections
import abc
import re
import subprocess
import copy

частичный импорт 
from time imort sleep,time,ctime

каждый файл в python представляется модулем соответственно перетаскивание кода между файлами делается засчет импортирования
чтобы выполнить импорт нужно указать имя файла с оператором import

запуск скрипта с параметрами